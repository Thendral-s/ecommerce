<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Connect Four Game</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: #f0f2f5;
      display: flex;
      flex-direction: column;
      align-items: center;
      margin-top: 40px;
    }
    h1 {
      color: #333;
    }
    #game {
      display: grid;
      grid-template-columns: repeat(7, 60px);
      grid-template-rows: repeat(6, 60px);
      gap: 5px;
      background: #004080;
      padding: 10px;
      border-radius: 10px;
    }
    .cell {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      background-color: white;
      display: flex;
      justify-content: center;
      align-items: center;
      cursor: pointer;
    }
    .red {
      background-color: red;
    }
    .yellow {
      background-color: yellow;
    }
    #status {
      margin-top: 20px;
      font-size: 20px;
    }
    #resetBtn {
      margin-top: 10px;
      padding: 10px 20px;
      font-size: 16px;
      border: none;
      background-color: #0077cc;
      color: white;
      border-radius: 5px;
      cursor: pointer;
    }
  </style>
</head>
<body>
  <h1>Connect Four</h1>
  <div id="game"></div>
  <div id="status">Player Red's turn</div>
  <button id="resetBtn">Reset Game</button>

  <script>
    const game = document.getElementById("game");
    const status = document.getElementById("status");
    const resetBtn = document.getElementById("resetBtn");

    const rows = 6;
    const cols = 7;
    let board = [];
    let currentPlayer = "red";
    let gameOver = false;

    function createBoard() {
      game.innerHTML = "";
      board = [];
      for (let row = 0; row < rows; row++) {
        board[row] = [];
        for (let col = 0; col < cols; col++) {
          const cell = document.createElement("div");
          cell.classList.add("cell");
          cell.dataset.row = row;
          cell.dataset.col = col;
          game.appendChild(cell);
          board[row][col] = "";
        }
      }
    }

    function getLowestEmptyRow(col) {
      for (let row = rows - 1; row >= 0; row--) {
        if (board[row][col] === "") {
          return row;
        }
      }
      return -1;
    }

    function checkWin(player) {
      // Horizontal
      for (let r = 0; r < rows; r++) {
        for (let c = 0; c < cols - 3; c++) {
          if (
            board[r][c] === player &&
            board[r][c + 1] === player &&
            board[r][c + 2] === player &&
            board[r][c + 3] === player
          ) return true;
        }
      }
      // Vertical
      for (let r = 0; r < rows - 3; r++) {
        for (let c = 0; c < cols; c++) {
          if (
            board[r][c] === player &&
            board[r + 1][c] === player &&
            board[r + 2][c] === player &&
            board[r + 3][c] === player
          ) return true;
        }
      }
      // Diagonal â†˜
      for (let r = 0; r < rows - 3; r++) {
        for (let c = 0; c < cols - 3; c++) {
          if (
            board[r][c] === player &&
            board[r + 1][c + 1] === player &&
            board[r + 2][c + 2] === player &&
            board[r + 3][c + 3] === player
          ) return true;
        }
      }
      // Diagonal â†™
      for (let r = 3; r < rows; r++) {
        for (let c = 0; c < cols - 3; c++) {
          if (
            board[r][c] === player &&
            board[r - 1][c + 1] === player &&
            board[r - 2][c + 2] === player &&
            board[r - 3][c + 3] === player
          ) return true;
        }
      }
      return false;
    }

    function handleClick(e) {
      if (gameOver || !e.target.classList.contains("cell")) return;

      const col = parseInt(e.target.dataset.col);
      const row = getLowestEmptyRow(col);
      if (row === -1) return;

      board[row][col] = currentPlayer;
      const cell = [...document.querySelectorAll(".cell")].find(c =>
        c.dataset.row == row && c.dataset.col == col);
      cell.classList.add(currentPlayer);

      if (checkWin(currentPlayer)) {
        status.textContent = `ðŸŽ‰ Player ${currentPlayer.toUpperCase()} wins!`;
        gameOver = true;
        return;
      }

      currentPlayer = currentPlayer === "red" ? "yellow" : "red";
      status.textContent = `Player ${currentPlayer.toUpperCase()}'s turn`;
    }

    game.addEventListener("click", handleClick);
    resetBtn.addEventListener("click", () => {
      currentPlayer = "red";
      gameOver = false;
      status.textContent = "Player Red's turn";
      createBoard();
    });

    createBoard();
  </script>
</body>
</html>